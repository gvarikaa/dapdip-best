// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id
  email       String   @unique
  username    String   @unique
  displayName String?
  bio         String?
  location    String?
  job         String?
  website     String?
  img         String?
  cover       String?
  avatarProps String?  @db.Text
  gender      String? // ეს ველი ასევე შეგიძლიათ დაამატოთ
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // RELATIONS
  posts Post[]

  likes Like[]

  saves SavedPosts[]

  followers  Follow[] @relation("UserFollowers")
  followings Follow[] @relation("UserFollowings")

  // მესიჯები და საუბრების მონაწილეები
  messages                 Message[]
  conversationParticipants ConversationParticipant[]

  // AI კომენტარის მოთხოვნები
  aiCommentRequests AIComment[]

  discussionSummaries DiscussionSummary[]

  postAnalyses PostAnalysis[]
}

model Post {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  desc        String?  @db.VarChar(255)
  img         String?
  imgHeight   Int?
  video       String?
  isSensitive Boolean  @default(false)

  // RELATIONS
  user   User   @relation(fields: [userId], references: [id])
  userId String

  rePostId Int?
  rePost   Post?  @relation("RePosts", fields: [rePostId], references: [id])
  rePosts  Post[] @relation("RePosts")

  parentPostId Int?
  parentPost   Post?  @relation("PostComments", fields: [parentPostId], references: [id])
  comments     Post[] @relation("PostComments")

  likes Like[]

  saves SavedPosts[]

  // AI კომენტარები ამ პოსტზე
  aiComments AIComment[]

  discussionSummaries DiscussionSummary[]

  analyses PostAnalysis[]

  // დავამატოთ ურთიერთობა ჰეშთეგებთან
  hashtags PostHashtag[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // RELATIONS
  userId String
  postId Int

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
}

model SavedPosts {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // RELATIONS
  userId String
  postId Int

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
}

model Follow {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // RELATIONS
  followerId  String
  followingId String

  follower  User @relation("UserFollowers", fields: [followerId], references: [id])
  following User @relation("UserFollowings", fields: [followingId], references: [id])
}

model Conversation {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isGroup      Boolean  @default(false)
  name         String?
  groupAdminId String?

  // რელაციები
  participants ConversationParticipant[]
  messages     Message[]
}

model ConversationParticipant {
  userId         String
  conversationId String
  joinedAt       DateTime  @default(now())
  lastReadAt     DateTime?

  // რელაციები
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@id([userId, conversationId])
}

model Message {
  id             Int       @id @default(autoincrement())
  content        String    @db.Text
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  senderId       String
  conversationId String
  isRead         Boolean   @default(false)
  readAt         DateTime?
  isEdited       Boolean   @default(false)
  attachmentUrl  String?
  attachmentType String?
  replyToId      Int?

  // რელაციები
  sender       User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

// AI კომენტარების მოდელი
model AIComment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  createdAt DateTime @default(now())

  // რელაციები
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  // მომხმარებელი, რომელმაც მოითხოვა AI-ის კომენტარი
  requestedBy   User   @relation(fields: [requestedById], references: [id])
  requestedById String
}

// AI კომენტარების შეჯამებების მოდელი
model DiscussionSummary {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  createdAt DateTime @default(now())

  // რელაციები
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  // მომხმარებელი, რომელმაც მოითხოვა შეჯამება
  requestedBy   User   @relation(fields: [requestedById], references: [id])
  requestedById String
}

// პოსტის ანალიზის მოდელი
model PostAnalysis {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  createdAt DateTime @default(now())

  // რელაციები
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  // მომხმარებელი, რომელმაც მოითხოვა ანალიზი
  requestedBy   User   @relation(fields: [requestedById], references: [id])
  requestedById String
}

// ჰეშთეგების მოდელი
model Hashtag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ურთიერთობა პოსტებთან
  posts PostHashtag[]
}

// პოსტებისა და ჰეშთეგების დამაკავშირებელი მოდელი (many-to-many)
model PostHashtag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // ურთიერთობები
  postId    Int
  hashtagId Int

  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  hashtag Hashtag @relation(fields: [hashtagId], references: [id], onDelete: Cascade)

  @@unique([postId, hashtagId])
}
