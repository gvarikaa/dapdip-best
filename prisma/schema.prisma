generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id
  email       String   @unique
  username    String   @unique
  displayName String?
  bio         String?
  location    String?
  job         String?
  website     String?
  img         String?
  cover       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // RELATIONS
  posts      Post[]
  likes      Like[]
  saves      SavedPosts[]
  followers  Follow[]     @relation("UserFollowers")
  followings Follow[]     @relation("UserFollowings")

  // ჩატის ურთიერთობები
  messages      Message[]
  conversations ConversationParticipant[]
}

model Post {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  desc        String?  @db.VarChar(255)
  img         String?
  imgHeight   Int?
  video       String?
  isSensitive Boolean  @default(false)

  // RELATIONS
  user   User   @relation(fields: [userId], references: [id])
  userId String

  rePostId Int?
  rePost   Post?  @relation("RePosts", fields: [rePostId], references: [id])
  rePosts  Post[] @relation("RePosts")

  parentPostId Int?
  parentPost   Post?  @relation("PostComments", fields: [parentPostId], references: [id])
  comments     Post[] @relation("PostComments")

  likes Like[]
  saves SavedPosts[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // RELATIONS
  userId String
  postId Int

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
}

model SavedPosts {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // RELATIONS
  userId String
  postId Int

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
}

model Follow {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // RELATIONS
  followerId  String
  followingId String

  follower  User @relation("UserFollowers", fields: [followerId], references: [id])
  following User @relation("UserFollowings", fields: [followingId], references: [id])
}

// ჩატის ახალი მოდელები

model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ურთიერთობები
  messages     Message[]
  participants ConversationParticipant[]

  // მეტა ინფორმაცია
  isGroup      Boolean @default(false)
  name         String? // ჯგუფური ჩატებისთვის
  groupAdminId String? // ჯგუფის ადმინის ID (თუ არის ჯგუფური ჩატი)
}

model ConversationParticipant {
  // მთავარი ურთიერთობები
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String

  // მეტა ინფორმაცია
  joinedAt   DateTime  @default(now())
  lastReadAt DateTime?

  // კომპოზიტური პირველადი გასაღები (composite primary key)
  @@id([userId, conversationId])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ურთიერთობები
  senderId       String
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  // დამატებითი მეტადატა
  isRead   Boolean   @default(false)
  readAt   DateTime?
  isEdited Boolean   @default(false)

  // დამატებითი ფუნქციები
  attachmentUrl  String? // ფაილის URL, თუ არის მიმაგრებული
  attachmentType String? // ფაილის ტიპი, მაგ. 'image', 'document', 'audio', და ა.შ.
  replyToId      Int? // მესიჯის ID, რომელსაც პასუხობს ეს მესიჯი (თუ არის პასუხი)
}
